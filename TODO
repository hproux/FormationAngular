✔ enum state-client @done(20-10-15 11:38)
✔ interface client-i @done(20-10-15 11:43)
✔ model (simple class) client (val par defaut state ACTIVE et tva 20) @done(20-10-15 11:47)
✔ clients-service @started(20-10-15 12:10) @done(20-10-15 12:10) @lasted(36s)
✔ page-list-clients @done(20-10-15 12:10)
  ✔ ts recup collection @done(20-10-15 12:10)
  ✔ html: template-full-width, tableau-dark (name, total HT, tva, ttc (calcul reuse le pipe total et la directive StateDirective), state), text-bandeau, button (add) @done(20-10-15 12:10)

EDIT ORDER:
  ✔ page list order html @done(20-10-15 16:54)
    ✔ afficher une colone supp (action) avec un icon edit devant chaque ligne (td) @done(20-10-15 16:55)
    ✔ click sur icon edit => goToEdit(item) @done(20-10-15 16:55)
  ✔ page list order ts @done(20-10-15 16:56)
    ✔ coder fn goToEdit(item: Order) => redirection dans le ts vers la route orders/edit/1 (si id 1) @done(20-10-16 09:43)
  ✔ orders routing ts @done(20-10-16 09:43)
    ✔ route edit qui autorise un paramètre id dans l'url @done(20-10-16 09:43)
  ✔ page edit order ts @done(20-10-16 09:43)
    ✔ récupérer l'id dans l'url (voir ActivatedRoute , obj Data BehaviorSubject) @done(20-10-16 09:43)
    ✔ appeler this.os.getItemById(id) et faire le subscribe @done(20-10-16 09:52)
    ✔ dans le subscribe on récupère la res de l'api (l'item qui correspond à l'id) et on initialise une propriété item avec cet obj @done(20-10-16 09:52)
  ✔ page edit order html @done(20-10-15 17:01)
    ✔ afficher form order component et on bind l'input init avec item quand il a une valeur @done(20-10-15 17:01)
    ✔ l'output submited appel une fn edit($event) @done(20-10-15 16:59)
  ✔ page edit order ts @done(20-10-15 16:59)
    ✔ code la fn edit(item: Order) => this.os.update(item).subscribe() @done(20-10-15 16:59)
    ✔ dans le subscribe, on redirige l'utilisateur vers la route orders @done(20-10-15 16:59)
